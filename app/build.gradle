import com.android.build.api.dsl.ManagedVirtualDevice

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'androidx.navigation.safeargs'
    id 'org.jetbrains.kotlin.android'
    id 'app.cash.exhaustive'
    id 'kotlin-parcelize'
    id 'com.squareup.wire'
    id 'translations'
    id 'licenses'
}

// Sort baseline.profm for reproducible builds
// See issue: https://issuetracker.google.com/issues/231837768
apply from: 'fix-profm.gradle'

wire {
    kotlin {
        javaInterop = true
    }

    sourcePath {
        srcDir 'src/main/protowire'
    }

    protoPath {
        srcDir "${project.rootDir}/libsignal/service/src/main/protowire"
    }
}

def getEnv(String name) {
    return project.hasProperty('CI') ? System.getenv(name) : null
}

// Override build config via env vars when project property 'CI' is set
ext {
    BASE_APP_TITLE = getEnv('CI_APP_TITLE') ?: baseAppTitle
    BASE_APP_FILENAME = getEnv('CI_APP_FILENAME') ?: baseAppFileName
    BASE_PACKAGE_ID = getEnv('CI_PACKAGE_ID') ?: basePackageId
    BUILD_VARIANTS = getEnv('CI_BUILD_VARIANTS') ?: buildVariants
    FORCE_INTERNAL_USER_FLAG = getEnv('CI_FORCE_INTERNAL_USER_FLAG') ?: forceInternalUserFlag
    MAPS_API_KEY = getEnv('CI_MAPS_API_KEY') ?: mapsApiKey
}

def canonicalVersionCode = 1341
def canonicalVersionName = "6.35.3"
def mollyRevision = 0

def postFixSize = 100

def selectableVariants = [
        'prodFossWebsiteDebug',
        'prodFossWebsiteRelease',
        'prodFossStoreDebug',
        'prodFossStoreRelease',
        'prodGmsWebsiteDebug',
        'prodGmsWebsiteRelease',
        'prodGmsWebsiteCanary',
        'prodGmsWebsiteInstrumentation',
        'prodGmsWebsiteSpinner',
        'stagingFossWebsiteDebug',
        'stagingFossWebsiteRelease',
        'stagingGmsWebsiteDebug',
        'stagingGmsWebsiteRelease',
]

android {
    namespace 'org.thoughtcrime.securesms'

    buildToolsVersion = signalBuildToolsVersion
    compileSdkVersion = signalCompileSdkVersion

    flavorDimensions 'environment', 'license', 'distribution'
    useLibrary 'org.apache.http.legacy'
    testBuildType 'instrumentation'

    kotlinOptions {
        jvmTarget = signalKotlinJvmTarget
        freeCompilerArgs = ["-Xallow-result-return-type"]
    }

    signingConfigs {
        ci {
            def storeFilePath = getEnv('CI_KEYSTORE_PATH')
            if (storeFilePath) {
                println("Signing release build with keystore: '$storeFilePath'")
                storeFile file(storeFilePath)
                storePassword "${System.env.CI_KEYSTORE_PASSWORD}"
                keyAlias "${System.env.CI_KEYSTORE_ALIAS}"
                keyPassword "${System.env.CI_KEYSTORE_PASSWORD}"
                enableV4Signing false
            }
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'

        unitTests {
            includeAndroidResources = true
        }

        managedDevices {
            devices {
                pixel3api30 (ManagedVirtualDevice) {
                    device = "Pixel 3"
                    apiLevel = 30
                    systemImageSource = "google-atd"
                    require64Bit = false
                }
            }
        }
    }


    sourceSets {
        test {
            java.srcDirs += "$projectDir/src/testShared"
        }

        androidTest {
            java.srcDirs += "$projectDir/src/testShared"
        }

        main {
            java.srcDirs += "$projectDir/src/unifiedpush/java"
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility signalJavaVersion
        targetCompatibility signalJavaVersion
    }

    packagingOptions {
        resources {
            excludes += ['LICENSE.txt', 'LICENSE', 'NOTICE', 'asm-license.txt', 'META-INF/LICENSE', 'META-INF/LICENSE.md', 'META-INF/NOTICE', 'META-INF/LICENSE-notice.md', 'META-INF/proguard/androidx-annotations.pro', 'libsignal_jni.dylib', 'signal_jni.dll', '**/*.proto']
        }
        jniLibs {
            // MOLLY: Compress native libs by default as APK is not split on ABIs
            useLegacyPackaging true
        }
    }


    buildFeatures {
        viewBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = '1.4.4'
    }

    if (mollyRevision < 0 || mollyRevision >= postFixSize) {
        throw new GradleException("Molly revision $mollyRevision out of range")
    }

    defaultConfig {
        versionCode canonicalVersionCode * postFixSize + mollyRevision
        versionName project.hasProperty('CI') ? getCommitTag() : canonicalVersionName

        minSdkVersion signalMinSdkVersion
        targetSdkVersion signalTargetSdkVersion

        multiDexEnabled true

        applicationId BASE_PACKAGE_ID

        buildConfigField "String", "SIGNAL_PACKAGE_NAME", "\"org.thoughtcrime.securesms\""
        buildConfigField "String", "SIGNAL_CANONICAL_VERSION_NAME", "\"$canonicalVersionName\""
        buildConfigField "int", "SIGNAL_CANONICAL_VERSION_CODE", "$canonicalVersionCode"
        buildConfigField "String", "BACKUP_FILENAME", "\"" + BASE_APP_FILENAME.toLowerCase() + "\""
        buildConfigField "boolean", "FORCE_INTERNAL_USER_FLAG", "$FORCE_INTERNAL_USER_FLAG"
        buildConfigField "boolean", "USE_OSM", "false"

        vectorDrawables.useSupportLibrary = true

        manifestPlaceholders = [mapsApiKey:MAPS_API_KEY]

        buildConfigField "long", "BUILD_TIMESTAMP", "${getBuildTimestamp()}L"
        buildConfigField "String", "GIT_HASH", "\"${getCommitHashOrNull()}\""
        // MOLLY: Ensure to add any new URL to the SignalServiceNetworkAccess.HOSTNAMES list
        buildConfigField "String", "SIGNAL_URL", "\"https://chat.signal.org\""
        buildConfigField "String", "STORAGE_URL", "\"https://storage.signal.org\""
        buildConfigField "String", "SIGNAL_CDN_URL", "\"https://cdn.signal.org\""
        buildConfigField "String", "SIGNAL_CDN2_URL", "\"https://cdn2.signal.org\""
        buildConfigField "String", "SIGNAL_CDN3_URL", "\"https://cdn3.signal.org\""
        buildConfigField "String", "SIGNAL_CDSI_URL", "\"https://cdsi.signal.org\""
        buildConfigField "String", "SIGNAL_SERVICE_STATUS_URL", "\"uptime.signal.org\""
        buildConfigField "String", "SIGNAL_KEY_BACKUP_URL", "\"https://api.backup.signal.org\""
        buildConfigField "String", "SIGNAL_SVR2_URL", "\"https://svr2.signal.org\""
        buildConfigField "String", "SIGNAL_SFU_URL", "\"https://sfu.voip.signal.org\""
        buildConfigField "String", "SIGNAL_STAGING_SFU_URL", "\"https://sfu.staging.voip.signal.org\""
        buildConfigField "String[]", "SIGNAL_SFU_INTERNAL_NAMES", "new String[]{\"Test\", \"Staging\", \"Development\"}"
        buildConfigField "String[]", "SIGNAL_SFU_INTERNAL_URLS", "new String[]{\"https://sfu.test.voip.signal.org\", \"https://sfu.staging.voip.signal.org\", \"https://sfu.staging.test.voip.signal.org\"}"
        buildConfigField "String", "CONTENT_PROXY_HOST", "\"contentproxy.signal.org\""
        buildConfigField "int", "CONTENT_PROXY_PORT", "443"
        buildConfigField "String", "SIGNAL_AGENT", "\"OWA\""
        buildConfigField "String", "CDSI_MRENCLAVE", "\"0f6fd79cdfdaa5b2e6337f534d3baf999318b0c462a7ac1f41297a3e4b424a57\""
        buildConfigField "String", "SVR2_MRENCLAVE", "\"6ee1042f9e20f880326686dd4ba50c25359f01e9f733eeba4382bca001d45094\""
        buildConfigField "org.thoughtcrime.securesms.KbsEnclave", "KBS_ENCLAVE", "new org.thoughtcrime.securesms.KbsEnclave(\"e18376436159cda3ad7a45d9320e382e4a497f26b0dca34d8eab0bd0139483b5\", " +
                                                                                                                           "\"3a485adb56e2058ef7737764c738c4069dd62bc457637eafb6bbce1ce29ddb89\", " +
                                                                                                                           "\"45627094b2ea4a66f4cf0b182858a8dcf4b8479122c3820fe7fd0551a6d4cf5c\")"
        buildConfigField "org.thoughtcrime.securesms.KbsEnclave[]", "KBS_FALLBACKS", "new org.thoughtcrime.securesms.KbsEnclave[] { new org.thoughtcrime.securesms.KbsEnclave(\"0cedba03535b41b67729ce9924185f831d7767928a1d1689acb689bc079c375f\", " +
                                                                                                                                                                             "\"187d2739d22be65e74b65f0055e74d31310e4267e5fac2b1246cc8beba81af39\", " +
                                                                                                                                                                             "\"ee19f1965b1eefa3dc4204eb70c04f397755f771b8c1909d080c04dad2a6a9ba\") }"
        buildConfigField "String", "UNIDENTIFIED_SENDER_TRUST_ROOT", "\"BXu6QIKVz5MA8gstzfOgRQGqyLqOwNKHL6INkv3IHWMF\""
        buildConfigField "String", "ZKGROUP_SERVER_PUBLIC_PARAMS", "\"AMhf5ywVwITZMsff/eCyudZx9JDmkkkbV6PInzG4p8x3VqVJSFiMvnvlEKWuRob/1eaIetR31IYeAbm0NdOuHH8Qi+Rexi1wLlpzIo1gstHWBfZzy1+qHRV5A4TqPp15YzBPm0WSggW6PbSn+F4lf57VCnHF7p8SvzAA2ZZJPYJURt8X7bbg+H3i+PEjH9DXItNEqs2sNcug37xZQDLm7X36nOoGPs54XsEGzPdEV+itQNGUFEjY6X9Uv+Acuks7NpyGvCoKxGwgKgE5XyJ+nNKlyHHOLb6N1NuHyBrZrgtY/JYJHRooo5CEqYKBqdFnmbTVGEkCvJKxLnjwKWf+fEPoWeQFj5ObDjcKMZf2Jm2Ae69x+ikU5gBXsRmoF94GXTLfN0/vLt98KDPnxwAQL9j5V1jGOY8jQl6MLxEs56cwXN0dqCnImzVH3TZT1cJ8SW1BRX6qIVxEzjsSGx3yxF3suAilPMqGRp4ffyopjMD1JXiKR2RwLKzizUe5e8XyGOy9fplzhw3jVzTRyUZTRSZKkMLWcQ/gv0E4aONNqs4P\""
        buildConfigField "String", "GENERIC_SERVER_PUBLIC_PARAMS", "\"AByD873dTilmOSG0TjKrvpeaKEsUmIO8Vx9BeMmftwUs9v7ikPwM8P3OHyT0+X3EUMZrSe9VUp26Wai51Q9I8mdk0hX/yo7CeFGJyzoOqn8e/i4Ygbn5HoAyXJx5eXfIbqpc0bIxzju4H/HOQeOpt6h742qii5u/cbwOhFZCsMIbElZTaeU+BWMBQiZHIGHT5IE0qCordQKZ5iPZom0HeFa8Yq0ShuEyAl0WINBiY6xE3H/9WnvzXBbMuuk//eRxXgzO8ieCeK8FwQNxbfXqZm6Ro1cMhCOF3u7xoX83QhpN\""
        buildConfigField "String[]", "LANGUAGES", "new String[]{\"" + autoResConfig().collect { s -> s.replace('-r', '_') }.join('", "') + '"}'
        buildConfigField "String", "DEFAULT_CURRENCIES", "\"EUR,AUD,GBP,CAD,CNY\""
        buildConfigField "String", "GIPHY_API_KEY", "\"3o6ZsYH6U6Eri53TXy\""
        buildConfigField "String", "SIGNAL_CAPTCHA_URL", "\"https://signalcaptchas.org/registration/generate.html\""
        buildConfigField "String", "RECAPTCHA_PROOF_URL", "\"https://signalcaptchas.org/challenge/generate.html\""

        // MOLLY: Rely on the built-in variables FLAVOR and BUILD_TYPE instead
        // buildConfigField "String", "BUILD_DISTRIBUTION_TYPE", "\"unset\""
        // buildConfigField "String", "BUILD_ENVIRONMENT_TYPE", "\"unset\""
        // buildConfigField "String", "BUILD_VARIANT_TYPE", "\"unset\""
        buildConfigField "String", "BADGE_STATIC_ROOT", "\"https://updates2.signal.org/static/badges/\""
        buildConfigField "boolean", "TRACING_ENABLED", "false"

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64'
        }

        resourceConfigurations += []

        bundle {
            language {
                enableSplit = false
            }
        }

        testInstrumentationRunner "org.thoughtcrime.securesms.testing.SignalTestRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    buildTypes {
        debug {
            isDefault true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard/proguard-firebase-messaging.pro',
                    'proguard/proguard-google-play-services.pro',
                    'proguard/proguard-jackson.pro',
                    'proguard/proguard-sqlite.pro',
                    'proguard/proguard-appcompat-v7.pro',
                    'proguard/proguard-square-okhttp.pro',
                    'proguard/proguard-square-okio.pro',
                    'proguard/proguard-rounded-image-view.pro',
                    'proguard/proguard-glide.pro',
                    'proguard/proguard-shortcutbadger.pro',
                    'proguard/proguard-retrofit.pro',
                    'proguard/proguard-webrtc.pro',
                    'proguard/proguard-klinker.pro',
                    'proguard/proguard-mobilecoin.pro',
                    'proguard/proguard-retrolambda.pro',
                    'proguard/proguard-okhttp.pro',
                    'proguard/proguard-ez-vcard.pro',
                    'proguard/proguard.cfg'
            testProguardFiles 'proguard/proguard-automation.pro',
                    'proguard/proguard.cfg'
        }

        instrumentation {
            initWith debug
            isDefault false
            minifyEnabled false
            matchingFallbacks = ['debug']
            applicationIdSuffix ".instrumentation"
        }

        spinner {
            initWith debug
            isDefault false
            minifyEnabled false
            matchingFallbacks = ['debug']
        }

        release {
            signingConfig signingConfigs.ci.storeFile ? signingConfigs.ci : null
            minifyEnabled true
            shrinkResources true
            proguardFiles = buildTypes.debug.proguardFiles
        }

        canary {
            initWith debug
            isDefault false
            minifyEnabled false
            matchingFallbacks = ['debug']
            buildConfigField "String", "BUILD_VARIANT_TYPE", "\"Canary\""
        }
    }

    productFlavors {
        website {
            dimension 'distribution'
            isDefault true
            buildConfigField "boolean", "ALLOW_INSTALL_SELF_UPDATES", "true"
        }

        store {
            dimension 'distribution'
            buildConfigField "boolean", "ALLOW_INSTALL_SELF_UPDATES", "false"
        }

        gms {
            dimension 'license'
            isDefault true
            buildConfigField "boolean", "USE_PLAY_SERVICES", "true"
            buildConfigField "String", "FDROID_UPDATE_URL", "\"https://molly.im/fdroid/repo\""
        }

        foss {
            dimension 'license'
            versionNameSuffix '-FOSS'
            buildConfigField "boolean", "USE_PLAY_SERVICES", "false"
            buildConfigField "String", "FDROID_UPDATE_URL", "\"https://molly.im/fdroid/foss/repo\""
            buildConfigField "boolean", "USE_OSM", "true"
        }

        prod {
            dimension 'environment'

            isDefault true

            buildConfigField "String", "MOBILE_COIN_ENVIRONMENT", "\"mainnet\""
        }

        staging {
            dimension 'environment'

            applicationIdSuffix ".staging"
            buildConfigField "String", "SIGNAL_PACKAGE_NAME", "\"org.thoughtcrime.securesms.staging\""

            buildConfigField "String", "SIGNAL_URL", "\"https://chat.staging.signal.org\""
            buildConfigField "String", "STORAGE_URL", "\"https://storage-staging.signal.org\""
            buildConfigField "String", "SIGNAL_CDN_URL", "\"https://cdn-staging.signal.org\""
            buildConfigField "String", "SIGNAL_CDN2_URL", "\"https://cdn2-staging.signal.org\""
            buildConfigField "String", "SIGNAL_CDN3_URL", "\"https://cdn3-staging.signal.org\""
            buildConfigField "String", "SIGNAL_CDSI_URL", "\"https://cdsi.staging.signal.org\""
            buildConfigField "String", "SIGNAL_KEY_BACKUP_URL", "\"https://api-staging.backup.signal.org\""
            buildConfigField "String", "SIGNAL_SVR2_URL", "\"https://svr2.staging.signal.org\""
            buildConfigField "String", "SVR2_MRENCLAVE", "\"a8a261420a6bb9b61aa25bf8a79e8bd20d7652531feb3381cbffd446d270be95\""
            buildConfigField "org.thoughtcrime.securesms.KbsEnclave", "KBS_ENCLAVE", "new org.thoughtcrime.securesms.KbsEnclave(\"39963b736823d5780be96ab174869a9499d56d66497aa8f9b2244f777ebc366b\", " +
                                                                                                                               "\"ee1d0d972b7ea903615670de43ab1b6e7a825e811c70a29bb5fe0f819e0975fa\", " +
                                                                                                                               "\"45627094b2ea4a66f4cf0b182858a8dcf4b8479122c3820fe7fd0551a6d4cf5c\")"
            buildConfigField "org.thoughtcrime.securesms.KbsEnclave[]", "KBS_FALLBACKS", "new org.thoughtcrime.securesms.KbsEnclave[] { new org.thoughtcrime.securesms.KbsEnclave(\"dd6f66d397d9e8cf6ec6db238e59a7be078dd50e9715427b9c89b409ffe53f99\", " +
                                                                                                                                                                                 "\"4200003414528c151e2dccafbc87aa6d3d66a5eb8f8c05979a6e97cb33cd493a\", " +
                                                                                                                                                                                 "\"ee19f1965b1eefa3dc4204eb70c04f397755f771b8c1909d080c04dad2a6a9ba\") }"
            buildConfigField "String", "UNIDENTIFIED_SENDER_TRUST_ROOT", "\"BbqY1DzohE4NUZoVF+L18oUPrK3kILllLEJh2UnPSsEx\""
            buildConfigField "String", "ZKGROUP_SERVER_PUBLIC_PARAMS", "\"ABSY21VckQcbSXVNCGRYJcfWHiAMZmpTtTELcDmxgdFbtp/bWsSxZdMKzfCp8rvIs8ocCU3B37fT3r4Mi5qAemeGeR2X+/YmOGR5ofui7tD5mDQfstAI9i+4WpMtIe8KC3wU5w3Inq3uNWVmoGtpKndsNfwJrCg0Hd9zmObhypUnSkfYn2ooMOOnBpfdanRtrvetZUayDMSC5iSRcXKpdlukrpzzsCIvEwjwQlJYVPOQPj4V0F4UXXBdHSLK05uoPBCQG8G9rYIGedYsClJXnbrgGYG3eMTG5hnx4X4ntARBgELuMWWUEEfSK0mjXg+/2lPmWcTZWR9nkqgQQP0tbzuiPm74H2wMO4u1Wafe+UwyIlIT9L7KLS19Aw8r4sPrXZSSsOZ6s7M1+rTJN0bI5CKY2PX29y5Ok3jSWufIKcgKOnWoP67d5b2du2ZVJjpjfibNIHbT/cegy/sBLoFwtHogVYUewANUAXIaMPyCLRArsKhfJ5wBtTminG/PAvuBdJ70Z/bXVPf8TVsR292zQ65xwvWTejROW6AZX6aqucUj\""
            buildConfigField "String", "GENERIC_SERVER_PUBLIC_PARAMS", "\"AHILOIrFPXX9laLbalbA9+L1CXpSbM/bTJXZGZiuyK1JaI6dK5FHHWL6tWxmHKYAZTSYmElmJ5z2A5YcirjO/yfoemE03FItyaf8W1fE4p14hzb5qnrmfXUSiAIVrhaXVwIwSzH6RL/+EO8jFIjJ/YfExfJ8aBl48CKHgu1+A6kWynhttonvWWx6h7924mIzW0Czj2ROuh4LwQyZypex4GuOPW8sgIT21KNZaafgg+KbV7XM1x1tF3XA17B4uGUaDbDw2O+nR1+U5p6qHPzmJ7ggFjSN6Utu+35dS1sS0P9N\""
            buildConfigField "String", "MOBILE_COIN_ENVIRONMENT", "\"testnet\""
            buildConfigField "String", "SIGNAL_CAPTCHA_URL", "\"https://signalcaptchas.org/staging/registration/generate.html\""
            buildConfigField "String", "RECAPTCHA_PROOF_URL", "\"https://signalcaptchas.org/staging/challenge/generate.html\""
        }
    }

    lint {
        abortOnError true
        baseline file('lint-baseline.xml')
        disable 'LintError'
    }

    android.applicationVariants.all { variant ->
        def isStaging = variant.productFlavors*.name.contains("staging")
        def hasSigningConfig = buildType.signingConfig || variant.signingConfig

        variant.resValue 'string', 'app_name', BASE_APP_TITLE + (isStaging ? " Staging" : "")
        variant.resValue "string", 'package_name', variant.applicationId

        variant.outputs.all {
            def flavors = "-${variant.baseName}" - ~/-prod/ - ~/-(foss|gms)/ - ~/-website/ - ~/-release/
            def unsigned = hasSigningConfig ? "" : "-unsigned"
            outputFileName = "${BASE_APP_FILENAME}${flavors}${unsigned}-${versionName}.apk"
        }
    }

    android.variantFilter { variant ->
        def matches = variant.name =~ BUILD_VARIANTS
        if (!(selectableVariants.contains(variant.name) && matches)) {
            setIgnore(true)
        }
    }

    android.buildTypes.each {
        if (it.name != 'release') {
            sourceSets.findByName(it.name).java.srcDirs += "$projectDir/src/debug/java"
        } else {
            sourceSets.findByName(it.name).java.srcDirs += "$projectDir/src/release/java"
        }
    }
}

dependencies {
    implementation libs.androidx.fragment.ktx
    lintChecks project(':lintchecks')

    coreLibraryDesugaring libs.android.tools.desugar

    implementation (libs.androidx.appcompat) {
        version {
            strictly '1.6.1'
        }
    }
    implementation libs.androidx.window.window
    implementation libs.androidx.window.java
    implementation libs.androidx.recyclerview
    implementation libs.material.material
    implementation libs.androidx.legacy.support
    implementation libs.androidx.preference
    implementation libs.androidx.legacy.preference
    implementation libs.androidx.gridlayout
    implementation libs.androidx.exifinterface
    implementation libs.androidx.compose.rxjava3
    implementation libs.androidx.compose.runtime.livedata
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.multidex
    implementation libs.androidx.navigation.fragment.ktx
    implementation libs.androidx.navigation.ui.ktx
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.lifecycle.process
    implementation libs.androidx.lifecycle.viewmodel.savedstate
    implementation libs.androidx.lifecycle.common.java8
    implementation libs.androidx.lifecycle.reactivestreams.ktx
    implementation libs.androidx.camera.core
    implementation libs.androidx.camera.camera2
    implementation libs.androidx.camera.lifecycle
    implementation libs.androidx.camera.view
    implementation libs.androidx.concurrent.futures
    implementation libs.androidx.autofill
    implementation libs.androidx.biometric
    implementation libs.androidx.sharetarget
    implementation libs.androidx.profileinstaller
    implementation libs.androidx.asynclayoutinflater
    implementation libs.androidx.asynclayoutinflater.appcompat
    implementation libs.androidx.webkit

    implementation 'com.github.UnifiedPush:android-connector:2.1.1'

    gmsImplementation (libs.firebase.messaging) {
        exclude group: 'com.google.firebase', module: 'firebase-core'
        exclude group: 'com.google.firebase', module: 'firebase-analytics'
        exclude group: 'com.google.firebase', module: 'firebase-measurement-connector'
    }

    gmsImplementation libs.google.play.services.maps
    gmsImplementation libs.google.play.services.auth

    fossImplementation 'org.osmdroid:osmdroid-android:6.1.16'

    implementation libs.bundles.media3

    implementation libs.conscrypt.android
    implementation libs.signal.aesgcmprovider

    implementation project(':libsignal-service')
    implementation project(':paging')
    implementation project(':core-util')
    implementation project(':glide-config')
    implementation project(':video')
    implementation project(':device-transfer')
    implementation project(':image-editor')
    fossImplementation project(':libfakegms')
    implementation project(":libnetcipher")
    implementation project(':contacts')
    implementation project(':qr')
    implementation project(':sticky-header-grid')
    implementation project(':photoview')
    implementation project(':glide-webp')

    implementation libs.libsignal.android

    implementation libs.mobilecoin

    implementation(libs.molly.argon2) {
        artifact {
            type = "aar"
        }
    }

    implementation libs.molly.ringrtc

    implementation libs.leolin.shortcutbadger
    implementation libs.emilsjolander.stickylistheaders
    implementation libs.apache.httpclient.android
    implementation libs.glide.glide
    implementation libs.roundedimageview
    implementation libs.materialish.progress
    implementation libs.greenrobot.eventbus
    implementation libs.google.zxing.android.integration
    implementation libs.google.zxing.core
    implementation libs.google.flexbox
    implementation (libs.subsampling.scale.image.view) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    implementation (libs.android.tooltips) {
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }
    implementation libs.stream

    implementation libs.lottie

    implementation libs.signal.android.database.sqlcipher
    implementation libs.androidx.sqlite

    implementation (libs.google.ez.vcard) {
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'org.freemarker'
    }
    implementation libs.dnsjava
    implementation libs.kotlinx.collections.immutable
    implementation libs.accompanist.permissions

    implementation libs.gosimple.nbvcxz
    implementation libs.molly.native.utils
    implementation libs.molly.glide.webp.decoder

    spinnerImplementation project(":spinner")

    canaryImplementation libs.square.leakcanary

    testImplementation testLibs.junit.junit
    testImplementation testLibs.assertj.core
    testImplementation testLibs.mockito.core
    testImplementation testLibs.mockito.kotlin

    testImplementation testLibs.androidx.test.core
    testImplementation (testLibs.robolectric.robolectric) {
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
    }
    testImplementation testLibs.robolectric.shadows.multidex
    testImplementation (testLibs.bouncycastle.bcprov.jdk15on) { version { strictly "1.70" } } // Used by roboelectric
    testImplementation (testLibs.bouncycastle.bcpkix.jdk15on) { version { strictly "1.70" } } // Used by roboelectric
    testImplementation testLibs.conscrypt.openjdk.uber // Used by robolectric
    testImplementation testLibs.hamcrest.hamcrest
    testImplementation testLibs.mockk

    testImplementation(testFixtures(project(":libsignal-service")))

    androidTestImplementation testLibs.androidx.test.ext.junit
    androidTestImplementation testLibs.espresso.core
    androidTestImplementation testLibs.androidx.test.core
    androidTestImplementation testLibs.androidx.test.core.ktx
    androidTestImplementation testLibs.androidx.test.ext.junit.ktx
    androidTestImplementation testLibs.mockito.android
    androidTestImplementation testLibs.mockito.kotlin
    androidTestImplementation testLibs.mockk.android
    androidTestImplementation testLibs.square.okhttp.mockserver

    instrumentationImplementation (libs.androidx.fragment.testing) {
        exclude group: 'androidx.test', module: 'core'
    }

    testImplementation testLibs.espresso.core

    implementation libs.kotlin.stdlib.jdk8

    implementation libs.rxjava3.rxandroid
    implementation libs.rxjava3.rxkotlin
    implementation libs.rxdogtag

    androidTestUtil testLibs.androidx.test.orchestrator

    implementation project(':core-ui')
}

static def getCommitTag() {
    return 'git describe --tags --exact-match'.execute().text.trim() ?: 'untagged'
}

static def getCommitTimestamp() {
    return 'git log -1 --pretty=format:%ct000'.execute().text.trim()
}

static def getCommitHashOrNull() {
    try {
        return 'git rev-parse --short=12 HEAD'.execute().text.trim()
    } catch (ignored) {
        return null
    }
}

static def getBuildTimestamp() {
    try {
        return getCommitTimestamp()
    } catch (ignored) {
        return new Date().getTime()
    }
}

tasks.withType(Test) {
    testLogging {
        events "failed"
        exceptionFormat "full"
        showCauses true
        showExceptions true
        showStackTraces true
    }
}
